import { QKits, Gates } from "../src/index";

console.log("üöÄ QUBIT SIMULATOR - DEMOSTRACI√ìN COMPLETA\n");

// ========================================
// 1. EJEMPLO B√ÅSICO: SUPERPOSICI√ìN
// ========================================
console.log("1Ô∏è‚É£ SUPERPOSICI√ìN CU√ÅNTICA:");
const qubit = QKits.createQubit();
console.log(
  `   Estado inicial: P(|0‚ü©)=${qubit
    .getProbabilityZero()
    .toFixed(3)}, P(|1‚ü©)=${qubit.getProbabilityOne().toFixed(3)}`
);

// Aplicar Hadamard
const H = Gates.H();
qubit.setState(H.apply(qubit.getState()));
console.log(
  `   Despu√©s de H: P(|0‚ü©)=${qubit
    .getProbabilityZero()
    .toFixed(3)}, P(|1‚ü©)=${qubit.getProbabilityOne().toFixed(3)}`
);
console.log(`   ¬øEn superposici√≥n?: ${qubit.isInSuperposition()}\n`);

// ========================================
// 2. ENTRELAZAMIENTO CU√ÅNTICO (ESTADO DE BELL)
// ========================================
console.log("2Ô∏è‚É£ ENTRELAZAMIENTO CU√ÅNTICO (Estado de Bell):");
const bellCircuit = QKits.createCircuit(2);

// Crear estado |Œ¶+‚ü© = (|00‚ü© + |11‚ü©)/‚àö2
bellCircuit.applyGate(Gates.H(), 0);
bellCircuit.applyCNOT(0, 1);

const bellProbs = bellCircuit.getMeasurementProbabilities();
console.log(
  `   Probabilidades: |00‚ü©=${bellProbs[0].toFixed(
    3
  )}, |01‚ü©=${bellProbs[1].toFixed(3)}, |10‚ü©=${bellProbs[2].toFixed(
    3
  )}, |11‚ü©=${bellProbs[3].toFixed(3)}`
);
console.log(`   Solo |00‚ü© y |11‚ü© tienen probabilidad = ENTRELAZADOS ‚ú®\n`);

// ========================================
// 3. ALGORITMO CU√ÅNTICO: ESTADO GHZ
// ========================================
console.log("3Ô∏è‚É£ ALGORITMO GHZ (3 qubits entrelazados):");
const ghzCircuit = QKits.createCircuit(3);

// Crear |GHZ‚ü© = (|000‚ü© + |111‚ü©)/‚àö2
ghzCircuit.applyGate(Gates.H(), 0);
ghzCircuit.applyCNOT(0, 1);
ghzCircuit.applyCNOT(1, 2);

const ghzProbs = ghzCircuit.getMeasurementProbabilities();
console.log(`   Estados con probabilidad no-cero:`);
ghzProbs.forEach((prob, index) => {
  if (prob > 0.001) {
    const binaryState = index.toString(2).padStart(3, "0");
    console.log(`   |${binaryState}‚ü©: ${prob.toFixed(3)}`);
  }
});
console.log(`   Los 3 qubits est√°n entrelazados üîó\n`);

// ========================================
// 4. ROTACIONES CU√ÅNTICAS
// ========================================
console.log("4Ô∏è‚É£ ROTACIONES CU√ÅNTICAS:");
const rotQubit = QKits.createQubit();

// Rotaci√≥n Ry(œÄ/3) - 60 grados
const ryGate = Gates.Ry(Math.PI / 3);
rotQubit.setState(ryGate.apply(rotQubit.getState()));

console.log(`   Despu√©s de Ry(œÄ/3):`);
console.log(`   P(|0‚ü©) = ${rotQubit.getProbabilityZero().toFixed(3)}`);
console.log(`   P(|1‚ü©) = ${rotQubit.getProbabilityOne().toFixed(3)}`);
console.log(`   √Ångulo controlado con precisi√≥n ‚öñÔ∏è\n`);

// ========================================
// 5. VALIDACI√ìN F√çSICA
// ========================================
console.log("5Ô∏è‚É£ VALIDACI√ìN F√çSICA CU√ÅNTICA:");

// Verificar unitariedad
const gates = [Gates.H(), Gates.X(), Gates.Rx(Math.PI / 4)];
console.log(`   Compuertas unitarias:`);
gates.forEach((gate) => {
  console.log(`   ${gate.name}: ${gate.isUnitary() ? "‚úÖ" : "‚ùå"}`);
});

// Verificar conservaci√≥n de probabilidad
const conservationCircuit = QKits.createCircuit(2);
conservationCircuit.applyGate(Gates.H(), 0);
conservationCircuit.applyGate(Gates.Ry(Math.PI / 6), 1);
conservationCircuit.applyCNOT(0, 1);

const finalProbs = conservationCircuit.getMeasurementProbabilities();
const totalProbability = finalProbs.reduce((sum, p) => sum + p, 0);
console.log(
  `   Suma de probabilidades: ${totalProbability.toFixed(10)} (debe ser 1.0)`
);
console.log(
  `   Conservaci√≥n: ${Math.abs(totalProbability - 1) < 1e-10 ? "‚úÖ" : "‚ùå"}\n`
);

// ========================================
// 6. SIMULACI√ìN ESTAD√çSTICA
// ========================================
console.log("6Ô∏è‚É£ SIMULACI√ìN ESTAD√çSTICA (1000 mediciones):");
const statCircuit = QKits.createCircuit(2);
statCircuit.applyGate(Gates.H(), 0);
statCircuit.applyCNOT(0, 1);

const measurements = { "00": 0, "11": 0 };
for (let i = 0; i < 1000; i++) {
  // Crear nueva copia para cada medici√≥n
  const tempCircuit = QKits.createCircuit(2);
  tempCircuit.applyGate(Gates.H(), 0);
  tempCircuit.applyCNOT(0, 1);

  const result = tempCircuit.measureAll();
  measurements[result as "00" | "11"]++;
}

console.log(`   Resultados despu√©s de 1000 mediciones:`);
console.log(
  `   |00‚ü©: ${measurements["00"]} veces (${(measurements["00"] / 10).toFixed(
    1
  )}%)`
);
console.log(
  `   |11‚ü©: ${measurements["11"]} veces (${(measurements["11"] / 10).toFixed(
    1
  )}%)`
);
console.log(`   Esperado: ~50% cada uno (distribuci√≥n cu√°ntica real) üìä\n`);

// ========================================
// 7. L√çMITES Y ADVERTENCIAS
// ========================================
console.log("7Ô∏è‚É£ DEMOSTRACI√ìN DE L√çMITES DE SEGURIDAD:");

try {
  console.log(`   Creando circuito de 20 qubits (deber√≠a advertir):`);
  const bigCircuit = QKits.createCircuit(20);
  console.log(`   ‚úÖ Creado exitosamente con advertencia de memoria`);
} catch (error) {
  console.log(`   ‚ùå Error: ${error.message}`);
}

try {
  console.log(`   Intentando crear circuito de 30 qubits (deber√≠a fallar):`);
  const tooLargeCircuit = QKits.createCircuit(30);
  console.log(`   ‚ùå NO deber√≠a llegar aqu√≠`);
} catch (error) {
  console.log(`   ‚úÖ Correctamente bloqueado: "${error.message}"`);
}

console.log("\nüéâ DEMOSTRACI√ìN COMPLETADA");
console.log("");
console.log("üìö Esta librer√≠a simula correctamente:");
console.log("   ‚Ä¢ Estados cu√°nticos matem√°ticamente exactos");
console.log("   ‚Ä¢ Entrelazamiento cu√°ntico real");
console.log("   ‚Ä¢ Mediciones probabil√≠sticas aut√©nticas");
console.log("   ‚Ä¢ Conservaci√≥n de probabilidades");
console.log("   ‚Ä¢ Compuertas unitarias verificadas");
console.log("");
console.log("‚ö†Ô∏è  Limitaciones (inherentes a simulaci√≥n cl√°sica):");
console.log("   ‚Ä¢ Crecimiento exponencial: RAM = 2^n √ó 16 bytes");
console.log("   ‚Ä¢ M√°ximo recomendado: 25 qubits (~512 MB)");
console.log('   ‚Ä¢ Sin ruido cu√°ntico (estados "perfectos")');
console.log("");
console.log("üéØ Ideal para: educaci√≥n, prototipado, algoritmos peque√±os");
